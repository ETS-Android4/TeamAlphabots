Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/AutoMinus_Blue1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode;\r\n\r\nimport com.qualcomm.hardware.rev.RevColorSensorV3;\r\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\r\nimport com.qualcomm.robotcore.eventloop.opmode.OpMode;\r\nimport com.qualcomm.robotcore.hardware.CRServo;\r\nimport com.qualcomm.robotcore.hardware.DcMotor;\r\nimport com.qualcomm.robotcore.util.ElapsedTime;\r\n\r\n@Autonomous(name=\"AutoMinus\", group=\"Training\")\r\n    public class AutoMinus_Blue1 extends OpMode {\r\n    DcMotor leftWheel;\r\n    DcMotor rightWheel;\r\n    DcMotor backLeftWheel;\r\n    DcMotor backRightWheel;\r\n    DcMotor armMotor;\r\n    DcMotor carouselMotor;\r\n    CRServo intakeServo;\r\n    RevColorSensorV3 colorSensor;\r\n    String TSEPosition;\r\n    double drivePower = 0.25;\r\n    //1 rotation = 360\r\n\r\n    private ElapsedTime runtime = new ElapsedTime();\r\n\r\n    @Override\r\n    public void init() {\r\n        leftWheel = hardwareMap.dcMotor.get(\"left_wheel\");\r\n        rightWheel = hardwareMap.dcMotor.get(\"right_wheel\");\r\n        backRightWheel = hardwareMap.dcMotor.get(\"back_right_wheel\");\r\n        backLeftWheel = hardwareMap.dcMotor.get(\"back_left_wheel\");\r\n        armMotor = hardwareMap.get(DcMotor.class, \"expansion_motor\");\r\n        carouselMotor = hardwareMap.get(DcMotor.class, \"carousel_arm\");\r\n        intakeServo = hardwareMap.crservo.get(\"expansion_servo\");\r\n        colorSensor = hardwareMap.get(RevColorSensorV3.class, \"color_sensor\");\r\n\r\n\r\n    }\r\n\r\n    public void Sleep(int milliseconds) {\r\n        try {\r\n            Thread.sleep(milliseconds);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void shippingHubLevel(int rotation) {\r\n        armMotor.setTargetPosition(rotation);\r\n        armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        armMotor.setPower(1);\r\n    }\r\n\r\n    public void shippingHubLevelReturn(int rotation){\r\n        armMotor.setTargetPosition(-rotation);\r\n        armMotor.setPower(0.04);\r\n    }\r\n\r\n    public void intakeFunc() {\r\n        intakeServo.setPower(1);\r\n    }\r\n\r\n    public void outakeFunc(){\r\n        runtime.reset();\r\n        runtime.startTime();\r\n        if(runtime.seconds() < 3 ) {\r\n            intakeServo.setPower(-1);\r\n        }\r\n\r\n    }\r\n\r\n    public void carouselFunc(double power){\r\n        carouselMotor.setTargetPosition(6);\r\n        carouselMotor.setPower(1);\r\n    }\r\n\r\n    public void resetEncoders() {\r\n        leftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backLeftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backRightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        armMotor.setMode((DcMotor.RunMode.STOP_AND_RESET_ENCODER));\r\n        carouselMotor.setMode((DcMotor.RunMode.STOP_AND_RESET_ENCODER));\r\n\r\n    }\r\n    public int detectShippingElement() {\r\n        if(colorSensor.green() > colorSensor.red() && colorSensor.green() > colorSensor.blue()) {\r\n            return 3;\r\n        } else {\r\n            forward(3);\r\n            if(colorSensor.green() > colorSensor.red() && colorSensor.green() > colorSensor.blue()) {\r\n                return 2;\r\n\r\n            } else {\r\n                return 1;\r\n                }\r\n            }\r\n        }\r\n\r\n    public void moveArm() {\r\n        if(detectShippingElement() == 1) {\r\n            shippingHubLevel(65);\r\n        }\r\n        if(detectShippingElement() == 2) {\r\n            shippingHubLevel(125);\r\n        }\r\n        if(detectShippingElement() == 3) {\r\n            shippingHubLevel(195);\r\n        }\r\n    }\r\n\r\n    public void pivotRight(int rotation) {\r\n        rightWheel.setTargetPosition(-rotation);\r\n        backLeftWheel.setTargetPosition(rotation);\r\n        backRightWheel.setTargetPosition(-rotation);\r\n\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        rightWheel.setPower(-drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(-drivePower);\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void start() {\r\n        //BLUE 1: strafe to barcode (Hor Right). Sense TSE. Forward. Drop cargo based on TSE. Move back to wall. Turn 90 degrees forward. Forward to carousel. Turn carousel. MOVE BACK TO THE BLUE TAPE AREA\r\n        //BLUE 2: strafe to barcode (Hor Left). Sense TSE. Forward. Drop cargo based on TSE. Move Back;\r\n        /*\r\n        resetEncoders();\r\n        horizontalRight(5);\r\n        resetEncoders();\r\n        moveArm();\r\n        forward(5);\r\n        outakeFunc();\r\n        backward(10);\r\n\r\n         */\r\n\r\n        pivotRight(5);\r\n\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void loop() {\r\n    }\r\n\r\n    @Override\r\n    public void stop() {\r\n        leftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backLeftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backRightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    public void diagonalLeft(int rotation) {\r\n        /*\r\n        backLeftWheel.setDirection(DcMotor.Direction.REVERSE);\r\n        rightWheel.setDirection(DcMotor.Direction.FORWARD);\r\n\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        //sleep(milliseconds 1000);\r\n\r\n         */\r\n\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(-rotation);\r\n\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(-drivePower);\r\n\r\n\r\n    }\r\n\r\n    public void backwardsDiagonalLeft(int rotation) {\r\n        /*\r\n        backLeftWheel.setDirection(DcMotor.Direction.FORWARD);\r\n        rightWheel.setDirection(DcMotor.Direction.REVERSE);\r\n\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        //sleep(2000);\r\n\r\n         */\r\n\r\n        rightWheel.setTargetPosition(-rotation);\r\n        backLeftWheel.setTargetPosition(rotation);\r\n\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        rightWheel.setPower(-drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n\r\n    }\r\n\r\n    public void diagonalRight(int rotation) {\r\n        /*\r\n        backRightWheel.setDirection(DcMotor.Direction.FORWARD);\r\n        leftWheel.setDirection(DcMotor.Direction.REVERSE);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n\r\n         */\r\n\r\n        leftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n    }\r\n\r\n    public void horizontalRight(int rotation) {\r\n        backRightWheel.setDirection(DcMotor.Direction.FORWARD);\r\n        leftWheel.setDirection(DcMotor.Direction.REVERSE);\r\n        rightWheel.setDirection(DcMotor.Direction.REVERSE);\r\n        backLeftWheel.setDirection(DcMotor.Direction.FORWARD);\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n    }\r\n\r\n    public void horizontalLeft(int rotation) {\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(-rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(-drivePower);\r\n    }\r\n\r\n    public void backwardsDiagonalRight(int rotation) {\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        backRightWheel.setTargetPosition(-rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(-drivePower);\r\n\r\n    }\r\n\r\n\r\n    public void forward(int rotation) {\r\n\r\n\r\n        leftWheel.setTargetPosition(-rotation);\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(-drivePower);\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n\r\n\r\n    }\r\n\r\n    public void backward(int rotation) {\r\n\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        rightWheel.setTargetPosition(-rotation);\r\n            backLeftWheel.setTargetPosition(rotation);\r\n        backRightWheel.setTargetPosition(-rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        rightWheel.setPower(-drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(-drivePower);\r\n\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/AutoMinus_Blue1.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/AutoMinus_Blue1.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/AutoMinus_Blue1.java	(revision 4d2dd2c405ae132df52729f38d153651eb2b9d8b)
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/AutoMinus_Blue1.java	(date 1637636130980)
@@ -7,7 +7,7 @@
 import com.qualcomm.robotcore.hardware.DcMotor;
 import com.qualcomm.robotcore.util.ElapsedTime;
 
-@Autonomous(name="AutoMinus", group="Training")
+@Autonomous(name="AutoMinus_Blue1", group="Training")
     public class AutoMinus_Blue1 extends OpMode {
     DcMotor leftWheel;
     DcMotor rightWheel;
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/ColorSensorTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode;\r\n\r\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\r\nimport com.qualcomm.robotcore.eventloop.opmode.OpMode;\r\nimport com.qualcomm.robotcore.hardware.DcMotor;\r\nimport com.qualcomm.robotcore.util.ElapsedTime;\r\nimport com.qualcomm.hardware.rev.RevColorSensorV3;\r\nimport com.qualcomm.robotcore.hardware.ColorSensor;\r\n\r\nimport android.app.Activity;\r\nimport android.graphics.Color;\r\nimport android.view.View;\r\n\r\nimport com.qualcomm.robotcore.eventloop.opmode.Disabled;\r\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\r\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\r\nimport com.qualcomm.robotcore.hardware.ColorSensor;\r\nimport com.qualcomm.robotcore.hardware.DistanceSensor;\r\n\r\nimport org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;\r\nimport java.lang.Object;\r\nimport java.util.Locale;\r\n@Autonomous(name=\"ColorSensorTest\", group=\"Training\")\r\n    public class ColorSensorTest extends OpMode {\r\n\r\n\r\n\r\n    DcMotor leftWheel;\r\n    DcMotor rightWheel;\r\n    DcMotor backLeftWheel;\r\n    DcMotor backRightWheel;\r\n    RevColorSensorV3 sensorColor;\r\n    double drivePower = 0.5;\r\n     //1 rotation = 360\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private ElapsedTime runtime= new ElapsedTime();\r\n\r\n    @Override\r\n    public void init() {\r\n        leftWheel = hardwareMap.dcMotor.get(\"left_wheel\");\r\n        rightWheel = hardwareMap.dcMotor.get(\"right_wheel\");\r\n        backRightWheel = hardwareMap.dcMotor.get(\"back_right_wheel\");\r\n        backLeftWheel = hardwareMap.dcMotor.get(\"back_left_wheel\");\r\n        sensorColor = hardwareMap.get(RevColorSensorV3.class, \"color_sensor\");\r\n        sensorColor.enableLed(true);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    public void Sleep(int milliseconds) {\r\n        try {\r\n            Thread.sleep(milliseconds);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public void resetEncoders() {\r\n        leftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backLeftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backRightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n    }\r\n\r\n    @Override\r\n    public void start() {\r\n\r\n\r\n\r\n        /*\r\n        Sleep(1000);\r\n        resetEncoders();\r\n\r\n        horizontalRight(1000);\r\n        Sleep(1000);\r\n        resetEncoders();\r\n\r\n\r\n        backward(1000);\r\n        Sleep(3000);\r\n        resetEncoders();\r\n\r\n        horizontalLeft(1000);\r\n        Sleep(1000);\r\n        resetEncoders();\r\n\r\n         */\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void loop() {\r\n\r\n        telemetry.addData(\"Normalized Color\", sensorColor.getNormalizedColors());\r\n        telemetry.addData(\"Distance\", sensorColor.getDistance(DistanceUnit.CM));\r\n        telemetry.addData(\"Red\", sensorColor.red());\r\n        telemetry.addData(\"Green\", sensorColor.green());\r\n        telemetry.addData(\"Blue\", sensorColor.blue());\r\n\r\n\r\n    }\r\n    @Override\r\n    public void stop() {\r\n        leftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backLeftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backRightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    public void diagonalLeft(int rotation) {\r\n        /*\r\n        backLeftWheel.setDirection(DcMotor.Direction.REVERSE);\r\n        rightWheel.setDirection(DcMotor.Direction.FORWARD);\r\n\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        //sleep(milliseconds 1000);\r\n\r\n         */\r\n\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(-rotation);\r\n\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(-drivePower);\r\n\r\n\r\n\r\n    }\r\n\r\n    public void backwardsDiagonalLeft(int rotation) {\r\n        /*\r\n        backLeftWheel.setDirection(DcMotor.Direction.FORWARD);\r\n        rightWheel.setDirection(DcMotor.Direction.REVERSE);\r\n\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        //sleep(2000);\r\n\r\n         */\r\n\r\n        rightWheel.setTargetPosition(-rotation);\r\n        backLeftWheel.setTargetPosition(rotation);\r\n\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        rightWheel.setPower(-drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n\r\n    }\r\n\r\n    public void diagonalRight(int rotation) {\r\n        /*\r\n        backRightWheel.setDirection(DcMotor.Direction.FORWARD);\r\n        leftWheel.setDirection(DcMotor.Direction.REVERSE);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n\r\n         */\r\n\r\n        leftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n    }\r\n\r\n    public void horizontalRight(int rotation) {\r\n\r\n        leftWheel.setTargetPosition(-rotation);\r\n        rightWheel.setTargetPosition(-rotation);\r\n        backLeftWheel.setTargetPosition(rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(-drivePower);\r\n        rightWheel.setPower(-drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n    }\r\n\r\n    public void horizontalLeft(int rotation) {\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(-rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(-drivePower);\r\n    }\r\n\r\n    public void backwardsDiagonalRight(int rotation) {\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        backRightWheel.setTargetPosition(-rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(-drivePower);\r\n\r\n    }\r\n\r\n\r\n\r\n    public void forward(int rotation) {\r\n\r\n\r\n        leftWheel.setTargetPosition(-rotation);\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(-drivePower);\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    public void backward(int rotation) {\r\n\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        rightWheel.setTargetPosition(-rotation);\r\n        backLeftWheel.setTargetPosition(rotation);\r\n        backRightWheel.setTargetPosition(-rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        rightWheel.setPower(-drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(-drivePower);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/ColorSensorTest.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/ColorSensorTest.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/ColorSensorTest.java	(revision 4d2dd2c405ae132df52729f38d153651eb2b9d8b)
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/ColorSensorTest.java	(date 1637688456610)
@@ -3,6 +3,7 @@
 import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
 import com.qualcomm.robotcore.eventloop.opmode.OpMode;
 import com.qualcomm.robotcore.hardware.DcMotor;
+import com.qualcomm.robotcore.hardware.PIDCoefficients;
 import com.qualcomm.robotcore.util.ElapsedTime;
 import com.qualcomm.hardware.rev.RevColorSensorV3;
 import com.qualcomm.robotcore.hardware.ColorSensor;
@@ -56,6 +57,7 @@
 
 
 
+
     }
 
 
@@ -99,7 +101,10 @@
          */
 
 
+
     }
+
+
 
     @Override
     public void loop() {
