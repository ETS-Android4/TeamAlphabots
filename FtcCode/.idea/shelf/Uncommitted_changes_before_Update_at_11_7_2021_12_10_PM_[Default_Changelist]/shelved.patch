Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/TeleOpTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode;\r\n\r\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\r\nimport com.qualcomm.robotcore.eventloop.opmode.OpMode;\r\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\r\nimport com.qualcomm.robotcore.hardware.CRServo;\r\nimport com.qualcomm.robotcore.hardware.DcMotor;\r\nimport com.qualcomm.robotcore.hardware.DcMotorSimple;\r\nimport com.qualcomm.robotcore.hardware.Servo;\r\nimport com.qualcomm.robotcore.util.ElapsedTime;\r\n\r\n@TeleOp(name=\"TeleOpTest\", group=\"Training\")\r\n    public class TeleOpTest extends OpMode {\r\n\r\n\r\n\r\n    DcMotor leftWheel;\r\n    DcMotor rightWheel;\r\n    DcMotor backLeftWheel;\r\n    DcMotor backRightWheel;\r\n    DcMotor armMotor;\r\n    CRServo intake;\r\n    double drivePower = 0.5;\r\n    int rotation = 1000; //1 rotation = 360\r\n\r\n    private ElapsedTime runtime= new ElapsedTime();\r\n\r\n\r\n    public void servoSpin() {\r\n        float forwardsSpin  = gamepad1.right_trigger;\r\n        float backwardsSpin = gamepad1.left_trigger;\r\n        if(forwardsSpin > 0) {\r\n            intake.setPower(forwardsSpin);\r\n        }\r\n        if(backwardsSpin > 0) {\r\n            intake.setPower(-backwardsSpin);\r\n        }\r\n    }\r\n\r\n    public void spin() {\r\n        double pivot = 0;\r\n        pivot = gamepad1.right_stick_y;;\r\n        if(pivot < 0) {\r\n            rightWheel.setPower(-pivot);\r\n            backRightWheel.setPower(-pivot);\r\n            leftWheel.setPower(pivot);\r\n            backLeftWheel.setPower(pivot);\r\n        }\r\n        if(pivot > 0) {\r\n            rightWheel.setPower(-pivot);\r\n            backRightWheel.setPower(-pivot);\r\n            leftWheel.setPower(pivot);\r\n            backLeftWheel.setPower(pivot);\r\n        }\r\n    }\r\n\r\n\r\n    public void moveDriveTrain() {\r\n        double vertical = 0; //Moves forwards and backwards\r\n        double horizontal = 0; //Move side-to-side\r\n        double peevot = 0;\r\n\r\n        vertical = -gamepad1.left_stick_y;\r\n        horizontal = gamepad1.left_stick_x;\r\n        peevot = gamepad1.right_stick_x;\r\n        rightWheel.setPower(peevot + (-vertical + horizontal));\r\n        backRightWheel.setPower(peevot + (-vertical - horizontal));\r\n        leftWheel.setPower(peevot + (-vertical - horizontal));\r\n        backLeftWheel.setPower(peevot + (-vertical + horizontal));\r\n\r\n        spin();\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void init() {\r\n        leftWheel = hardwareMap.dcMotor.get(\"left_wheel\");\r\n        rightWheel = hardwareMap.dcMotor.get(\"right_wheel\");\r\n        backRightWheel = hardwareMap.dcMotor.get(\"back_right_wheel\");\r\n        backLeftWheel = hardwareMap.dcMotor.get(\"back_left_wheel\");\r\n        intake = hardwareMap.crservo.get(\"expansion_servo\");\r\n\r\n        rightWheel.setDirection(DcMotorSimple.Direction.REVERSE); //rightWheel\r\n        backRightWheel.setDirection(DcMotorSimple.Direction.REVERSE); //backRightWheel\r\n\r\n    }\r\n\r\n    public void Sleep(int milliseconds) {\r\n        try {\r\n            Thread.sleep(milliseconds);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public void resetEncoders() {\r\n        leftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backLeftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backRightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n    }\r\n\r\n    @Override\r\n    public void start() {\r\n\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void loop() {\r\n        moveDriveTrain();\r\n        servoSpin();\r\n\r\n    }\r\n    @Override\r\n    public void stop() {\r\n        leftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backLeftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backRightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //@Override\r\n    //public void loop() {\r\n    //    leftWheel.setPower(drivePower);\r\n    //    rightWheel.setPower(drivePower);\r\n    //    backRightWheel.setPower(drivePower);\r\n    //    backLeftWheel.setPower(drivePower);\r\n\r\n\r\n//    }\r\n\r\n    public void intakeFunc(){\r\n        boolean inteeke;\r\n        inteeke = gamepad1.right_bumper;\r\n        while(inteeke == true){\r\n            intake.setPower(1);\r\n        }\r\n    }\r\n    public void diagonalLeft() {\r\n        /*\r\n        backLeftWheel.setDirection(DcMotor.Direction.REVERSE);\r\n        rightWheel.setDirection(DcMotor.Direction.FORWARD);\r\n\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        //sleep(milliseconds 1000);\r\n\r\n         */\r\n\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(-rotation);\r\n\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(-drivePower);\r\n\r\n\r\n\r\n    }\r\n\r\n    public void backwardsDiagonalLeft() {\r\n        /*\r\n        backLeftWheel.setDirection(DcMotor.Direction.FORWARD);\r\n        rightWheel.setDirection(DcMotor.Direction.REVERSE);\r\n\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        //sleep(2000);\r\n\r\n         */\r\n\r\n        rightWheel.setTargetPosition(-rotation);\r\n        backLeftWheel.setTargetPosition(rotation);\r\n\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        rightWheel.setPower(-drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n\r\n    }\r\n\r\n    public void diagonalRight() {\r\n        /*\r\n        backRightWheel.setDirection(DcMotor.Direction.FORWARD);\r\n        leftWheel.setDirection(DcMotor.Direction.REVERSE);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n\r\n         */\r\n\r\n        leftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n    }\r\n\r\n    public void right() {\r\n\r\n        leftWheel.setTargetPosition(-rotation);\r\n        rightWheel.setTargetPosition(-rotation);\r\n        backLeftWheel.setTargetPosition(rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(-drivePower);\r\n        rightWheel.setPower(-drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n    }\r\n\r\n    public void left() {\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(-rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(-drivePower);\r\n    }\r\n\r\n    public void backwardsDiagonalRight() {\r\n\r\n        leftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n\r\n    }\r\n\r\n\r\n\r\n    public void forward() {\r\n\r\n\r\n        leftWheel.setTargetPosition(-rotation);\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(-drivePower);\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n\r\n        leftWheel.setTargetPosition(-300);\r\n        rightWheel.setTargetPosition(300);\r\n        backLeftWheel.setTargetPosition(-300);\r\n        backRightWheel.setTargetPosition(300);\r\n\r\n        leftWheel.setPower(-0.2);\r\n        rightWheel.setPower(0.2);\r\n        backLeftWheel.setPower(-0.2);\r\n        backRightWheel.setPower(0.2);\r\n\r\n\r\n\r\n    }\r\n\r\n    public void backward() {\r\n\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        rightWheel.setTargetPosition(-rotation);\r\n        backLeftWheel.setTargetPosition(rotation);\r\n        backRightWheel.setTargetPosition(-rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        rightWheel.setPower(-drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(-drivePower);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/TeleOpTest.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/TeleOpTest.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/TeleOpTest.java	(revision d8bfe3fb43aa2f260c14e9a76d324d1fd90f9f3e)
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/TeleOpTest.java	(date 1636315813052)
@@ -29,11 +29,8 @@
     public void servoSpin() {
         float forwardsSpin  = gamepad1.right_trigger;
         float backwardsSpin = gamepad1.left_trigger;
-        if(forwardsSpin > 0) {
-            intake.setPower(forwardsSpin);
-        }
-        if(backwardsSpin > 0) {
-            intake.setPower(-backwardsSpin);
+        while(forwardsSpin > 0) {
+
         }
     }
 
