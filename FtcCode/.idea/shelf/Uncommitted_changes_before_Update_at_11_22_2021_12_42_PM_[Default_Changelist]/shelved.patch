Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/AutoMinus_Blue1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode;\r\n\r\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\r\nimport com.qualcomm.robotcore.eventloop.opmode.OpMode;\r\nimport com.qualcomm.robotcore.hardware.DcMotor;\r\nimport com.qualcomm.robotcore.util.ElapsedTime;\r\n\r\n@Autonomous(name=\"AutoMinus\", group=\"Training\")\r\n    public class AutoMinus_Blue1 extends OpMode {\r\n    DcMotor leftWheel;\r\n    DcMotor rightWheel;\r\n    DcMotor backLeftWheel;\r\n    DcMotor backRightWheel;\r\n    DcMotor armMotor;\r\n    double drivePower = 0.25;\r\n    //1 rotation = 360\r\n\r\n    private ElapsedTime runtime = new ElapsedTime();\r\n\r\n    @Override\r\n    public void init() {\r\n        leftWheel = hardwareMap.dcMotor.get(\"left_wheel\");\r\n        rightWheel = hardwareMap.dcMotor.get(\"right_wheel\");\r\n        backRightWheel = hardwareMap.dcMotor.get(\"back_right_wheel\");\r\n        backLeftWheel = hardwareMap.dcMotor.get(\"back_left_wheel\");\r\n        armMotor = hardwareMap.get(DcMotor.class, \"expansion_motor\");\r\n\r\n\r\n    }\r\n\r\n    public void Sleep(int milliseconds) {\r\n        try {\r\n            Thread.sleep(milliseconds);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void resetEncoders() {\r\n        leftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backLeftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backRightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n    }\r\n\r\n    @Override\r\n    public void start() {\r\n        //BLUE 1:\r\n        //Blue 2:\r\n        int rotation = 50;\r\n        armMotor.setTargetPosition(rotation);\r\n        armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        armMotor.setPower(1);\r\n        resetEncoders();\r\n        horizontalRight(5);\r\n        resetEncoders();\r\n        horizontalLeft(5);\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void loop() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void stop() {\r\n        leftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        rightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backLeftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        backRightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n\r\n\r\n    }\r\n\r\n\r\n    public void diagonalLeft(int rotation) {\r\n        /*\r\n        backLeftWheel.setDirection(DcMotor.Direction.REVERSE);\r\n        rightWheel.setDirection(DcMotor.Direction.FORWARD);\r\n\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        //sleep(milliseconds 1000);\r\n\r\n         */\r\n\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(-rotation);\r\n\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(-drivePower);\r\n\r\n\r\n    }\r\n\r\n    public void backwardsDiagonalLeft(int rotation) {\r\n        /*\r\n        backLeftWheel.setDirection(DcMotor.Direction.FORWARD);\r\n        rightWheel.setDirection(DcMotor.Direction.REVERSE);\r\n\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        //sleep(2000);\r\n\r\n         */\r\n\r\n        rightWheel.setTargetPosition(-rotation);\r\n        backLeftWheel.setTargetPosition(rotation);\r\n\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        rightWheel.setPower(-drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n\r\n    }\r\n\r\n    public void diagonalRight(int rotation) {\r\n        /*\r\n        backRightWheel.setDirection(DcMotor.Direction.FORWARD);\r\n        leftWheel.setDirection(DcMotor.Direction.REVERSE);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n\r\n         */\r\n\r\n        leftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n    }\r\n\r\n    public void horizontalRight(int rotation) {\r\n        backRightWheel.setDirection(DcMotor.Direction.FORWARD);\r\n        leftWheel.setDirection(DcMotor.Direction.REVERSE);\r\n        rightWheel.setDirection(DcMotor.Direction.REVERSE);\r\n        backLeftWheel.setDirection(DcMotor.Direction.FORWARD);\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n    }\r\n\r\n    public void horizontalLeft(int rotation) {\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(-rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(-drivePower);\r\n    }\r\n\r\n    public void backwardsDiagonalRight(int rotation) {\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        backRightWheel.setTargetPosition(-rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(-drivePower);\r\n\r\n    }\r\n\r\n\r\n    public void forward(int rotation) {\r\n\r\n\r\n        leftWheel.setTargetPosition(-rotation);\r\n        rightWheel.setTargetPosition(rotation);\r\n        backLeftWheel.setTargetPosition(-rotation);\r\n        backRightWheel.setTargetPosition(rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(-drivePower);\r\n        rightWheel.setPower(drivePower);\r\n        backLeftWheel.setPower(-drivePower);\r\n        backRightWheel.setPower(drivePower);\r\n\r\n\r\n    }\r\n\r\n    public void backward(int rotation) {\r\n\r\n\r\n        leftWheel.setTargetPosition(rotation);\r\n        rightWheel.setTargetPosition(-rotation);\r\n            backLeftWheel.setTargetPosition(rotation);\r\n        backRightWheel.setTargetPosition(-rotation);\r\n\r\n        leftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        rightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backLeftWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n        backRightWheel.setMode(DcMotor.RunMode.RUN_TO_POSITION);\r\n\r\n        leftWheel.setPower(drivePower);\r\n        rightWheel.setPower(-drivePower);\r\n        backLeftWheel.setPower(drivePower);\r\n        backRightWheel.setPower(-drivePower);\r\n\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/AutoMinus_Blue1.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/AutoMinus_Blue1.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/AutoMinus_Blue1.java	(revision a5bcf012cdb53a9475eb01cf9c12771ab80ab84e)
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/AutoMinus_Blue1.java	(date 1637613641072)
@@ -2,6 +2,7 @@
 
 import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
 import com.qualcomm.robotcore.eventloop.opmode.OpMode;
+import com.qualcomm.robotcore.hardware.CRServo;
 import com.qualcomm.robotcore.hardware.DcMotor;
 import com.qualcomm.robotcore.util.ElapsedTime;
 
@@ -12,6 +13,8 @@
     DcMotor backLeftWheel;
     DcMotor backRightWheel;
     DcMotor armMotor;
+    DcMotor carouselMotor;
+    CRServo intakeServo;
     double drivePower = 0.25;
     //1 rotation = 360
 
@@ -24,6 +27,8 @@
         backRightWheel = hardwareMap.dcMotor.get("back_right_wheel");
         backLeftWheel = hardwareMap.dcMotor.get("back_left_wheel");
         armMotor = hardwareMap.get(DcMotor.class, "expansion_motor");
+        carouselMotor = hardwareMap.get(DcMotor.class, "carousel_arm");
+        intakeServo = hardwareMap.crservo.get("expansion_servo");
 
 
     }
@@ -36,11 +41,39 @@
         }
     }
 
+    public void shippingHubLevel(int rotation) {
+        armMotor.setTargetPosition(rotation);
+        armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
+        armMotor.setPower(1);
+    }
+
+    public void shippingHubLevelReturn(int rotation){
+        armMotor.setTargetPosition(-rotation);
+        armMotor.setPower(0.04);
+    }
+
+    public void intakeFunc() {
+
+        intakeServo.setPower(1);
+    }
+
+    public void outakeFunc(){
+        intakeServo.setPower(-1);
+    }
+
+    public void carouselFunc(double power){
+        carouselMotor.setTargetPosition(6);
+        carouselMotor.setPower(1);
+    }
+
     public void resetEncoders() {
         leftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
         rightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
         backLeftWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
         backRightWheel.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
+        armMotor.setMode((DcMotor.RunMode.STOP_AND_RESET_ENCODER));
+        carouselMotor.setMode((DcMotor.RunMode.STOP_AND_RESET_ENCODER));
+
     }
 
     @Override
@@ -48,9 +81,7 @@
         //BLUE 1:
         //Blue 2:
         int rotation = 50;
-        armMotor.setTargetPosition(rotation);
-        armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
-        armMotor.setPower(1);
+        shippingHubLevel(65);
         resetEncoders();
         horizontalRight(5);
         resetEncoders();
